// <auto-generated />
using System;
using BookingManagement.Repositories.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingManagement.Repositories.Migrations
{
    [DbContext(typeof(FptuRoomBookingContext))]
    [Migration("20250820162236_hehe")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingManagement.Repositories.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("EndRecurringDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsRecurring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RejectReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int")
                        .HasColumnName("TimeSlotID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__73951ACDD2F1CA59");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex(new[] { "BookingDate", "TimeSlotId", "RoomId" }, "IX_Booking_Date_TimeSlot");

                    b.HasIndex(new[] { "RoomId" }, "IX_Booking_RoomID");

                    b.HasIndex(new[] { "Status" }, "IX_Booking_Status");

                    b.HasIndex(new[] { "UserId" }, "IX_Booking_UserID");

                    b.ToTable("Booking", null, t =>
                        {
                            t.HasTrigger("trg_Booking_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32DF012003");

                    b.HasIndex("BookingId");

                    b.HasIndex(new[] { "UserId" }, "IX_Notification_UserID");

                    b.HasIndex(new[] { "UserId", "IsRead" }, "IX_Notification_UserID_IsRead");

                    b.ToTable("Notification", null, t =>
                        {
                            t.HasTrigger("trg_Notification_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE3A32139E5B");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Role__8A2B6160EA5F0586")
                        .IsUnique();

                    b.ToTable("Role", null, t =>
                        {
                            t.HasTrigger("trg_Role_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<string>("Building")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RoomId")
                        .HasName("PK__Room__32863919EA2D351E");

                    b.HasIndex(new[] { "Building" }, "IX_Room_Building");

                    b.HasIndex(new[] { "RoomType" }, "IX_Room_RoomType");

                    b.HasIndex(new[] { "Status" }, "IX_Room_Status");

                    b.ToTable("Room", null, t =>
                        {
                            t.HasTrigger("trg_Room_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeManagement.BlockedTimeSlot", b =>
                {
                    b.Property<int>("BlockedTimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlockedTimeSlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockedTimeSlotId"));

                    b.Property<int>("BlockType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int")
                        .HasColumnName("TimeSlotID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BlockedTimeSlotId")
                        .HasName("PK__BlockedTimeSlot");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoomId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("BlockedTimeSlot", (string)null);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeManagement.OperationalHours", b =>
                {
                    b.Property<int>("OperationalHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OperationalHoursID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationalHoursId"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OperationalHoursId")
                        .HasName("PK__Operational__Hours");

                    b.HasIndex("RoomId");

                    b.ToTable("OperationalHours", (string)null);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeManagement.SpecialSchedule", b =>
                {
                    b.Property<int>("SpecialScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpecialScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialScheduleId"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("BuildingID");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SpecialScheduleId")
                        .HasName("PK__SpecialSchedule");

                    b.HasIndex("RoomId");

                    b.ToTable("SpecialSchedule", (string)null);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeSlot", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TimeSlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSlotId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TimeSlotId")
                        .HasName("PK__TimeSlot__41CC1F526E388D63");

                    b.ToTable("TimeSlot", null, t =>
                        {
                            t.HasTrigger("trg_TimeSlot_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCAC01F07AA8");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email");

                    b.HasIndex(new[] { "RoleId" }, "IX_User_RoleID");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D10534E0257F6C")
                        .IsUnique();

                    b.ToTable("User", null, t =>
                        {
                            t.HasTrigger("trg_User_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Booking", b =>
                {
                    b.HasOne("BookingManagement.Repositories.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__RoomID__403A8C7D");

                    b.HasOne("BookingManagement.Repositories.Models.TimeSlot", "TimeSlot")
                        .WithMany("Bookings")
                        .HasForeignKey("TimeSlotId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__TimeSlo__412EB0B6");

                    b.HasOne("BookingManagement.Repositories.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__UserID__3F466844");

                    b.Navigation("Room");

                    b.Navigation("TimeSlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Notification", b =>
                {
                    b.HasOne("BookingManagement.Repositories.Models.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Notificat__Booki__48CFD27E");

                    b.HasOne("BookingManagement.Repositories.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__47DBAE45");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeManagement.BlockedTimeSlot", b =>
                {
                    b.HasOne("BookingManagement.Repositories.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .IsRequired()
                        .HasConstraintName("FK__BlockedTimeSlot__CreatedByID");

                    b.HasOne("BookingManagement.Repositories.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__BlockedTimeSlot__RoomID");

                    b.HasOne("BookingManagement.Repositories.Models.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .IsRequired()
                        .HasConstraintName("FK__BlockedTimeSlot__TimeSlotID");

                    b.Navigation("CreatedBy");

                    b.Navigation("Room");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeManagement.OperationalHours", b =>
                {
                    b.HasOne("BookingManagement.Repositories.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__OperationalHours__RoomID");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeManagement.SpecialSchedule", b =>
                {
                    b.HasOne("BookingManagement.Repositories.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__SpecialSchedule__RoomID");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.User", b =>
                {
                    b.HasOne("BookingManagement.Repositories.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleID__2D27B809");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Booking", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.TimeSlot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingManagement.Repositories.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
